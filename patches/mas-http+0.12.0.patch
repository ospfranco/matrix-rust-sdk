diff --git a/Cargo.toml b/Cargo.toml
index 05dd02d..99920d3 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,28 +1,30 @@
 [package]
 name = "mas-http"
 description = "HTTP utilities for the Matrix Authentication Service"
-version.workspace = true
-authors.workspace = true
-edition.workspace = true
-license.workspace = true
-homepage.workspace = true
-repository.workspace = true
-
-[lints]
-workspace = true
+version = "0.12.0"
+# authors.workspace = true
+edition = "2021"
+# license.workspace = true
+# homepage.workspace = true
+# repository.workspace = true
 
 [dependencies]
-futures-util.workspace = true
-headers.workspace = true
-http.workspace = true
-hyper-util.workspace = true
-opentelemetry-http.workspace = true
-opentelemetry-semantic-conventions.workspace = true
-opentelemetry.workspace = true
-reqwest.workspace = true
-rustls-platform-verifier.workspace = true
-tokio.workspace = true
-tower.workspace = true
-tower-http.workspace = true
-tracing.workspace = true
-tracing-opentelemetry.workspace = true
+futures-util = "0.3.31"
+headers = "0.4.0"
+http = "1.2.0"
+hyper-util = { version = "0.1.10", features = ["client", "http1", "http2"]}
+opentelemetry-http = {version = "0.27.0", features = ["reqwest"]}
+opentelemetry-semantic-conventions = {version = "0.27.0", features = ["semconv_experimental"]}
+opentelemetry = {version = "0.27.1", features = ["trace", "metrics"]}
+reqwest = { version = "0.12.12", default-features = false, features = ["http2", "rustls-tls-manual-roots", "charset", "json", "socks"]}
+rustls-platform-verifier = "0.3.4"
+tower = {version = "0.5.2", features = ["util"]}
+tower-http = {version = "0.6.2", features = ["cors", "fs", "add-extension", "set-header"]}
+tracing = "0.1.41"
+tracing-opentelemetry = {version = "0.28.0", default-features = false}
+
+# [target.'cfg(target_arch = "wasm32")'.dependencies]
+web-time = { version = "1.1.0" }
+
+# [target.'cfg(not(target_arch = "wasm32"))'.dependencies]
+# tokio.workspace = true
\ No newline at end of file
diff --git a/src/reqwest.rs b/src/reqwest.rs
index b895338..f25cb48 100644
--- a/src/reqwest.rs
+++ b/src/reqwest.rs
@@ -30,10 +30,13 @@ use opentelemetry_semantic_conventions::{
         NETWORK_TYPE, SERVER_ADDRESS, SERVER_PORT, URL_FULL, URL_SCHEME, USER_AGENT_ORIGINAL,
     },
 };
+#[cfg(not(target_arch = "wasm32"))]
 use tokio::time::Instant;
 use tower::{BoxError, Service as _};
 use tracing::Instrument;
 use tracing_opentelemetry::OpenTelemetrySpanExt;
+#[cfg(target_arch = "wasm32")]
+use web_time::Instant;
 
 use crate::METER;
 
@@ -113,9 +116,7 @@ async fn send_traced(
     let server_address = request.url().host_str().map(ToOwned::to_owned);
     let server_port = request.url().port_or_known_default();
     let scheme = request.url().scheme().to_owned();
-    let user_agent = headers
-        .typed_get::<UserAgent>()
-        .map(tracing::field::display);
+    let user_agent = headers.typed_get::<UserAgent>().map(tracing::field::display);
     let content_length = headers.typed_get().map(|ContentLength(len)| len);
     let method = request.method().to_string();
 
@@ -148,10 +149,8 @@ async fn send_traced(
         propagator.inject_context(&context, &mut injector);
     });
 
-    let mut metrics_labels = vec![
-        KeyValue::new(HTTP_REQUEST_METHOD, method.clone()),
-        KeyValue::new(URL_SCHEME, scheme),
-    ];
+    let mut metrics_labels =
+        vec![KeyValue::new(HTTP_REQUEST_METHOD, method.clone()), KeyValue::new(URL_SCHEME, scheme)];
 
     if let Some(server_address) = server_address {
         metrics_labels.push(KeyValue::new(SERVER_ADDRESS, server_address));
